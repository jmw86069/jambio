% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jambio-design.R
\name{curateDFtoDF}
\alias{curateDFtoDF}
\title{Curate data.frame into a data.frame}
\usage{
curateDFtoDF(
  x,
  curationL2 = NULL,
  matchWholeString = TRUE,
  trimWhitespace = TRUE,
  whitespace = "_ ",
  expandWhitespace = TRUE,
  keepAllColnames = TRUE,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{x}{data.frame}

\item{curationL2}{list with curation rules as described above, or
a character vector of yaml files, which will be imported into
a list format using \code{yaml::yaml.load_file()}.}

\item{matchWholeString, trimWhitespace, whitespace, expandWhitespace}{arguments passed to \code{curateVtoDF()}.}

\item{keepAllColnames}{logical indicating whether to keep all colnames
from \code{x} in addition to those created during curation.
\code{keepAllColnames=FALSE} will only keep colnames specifically
described in the \code{curationL2} list, while \code{keepAllColnames=TRUE}
will keep all original colnames, and any colnames added during
the curation steps.}

\item{verbose}{logical indicating whether to print verbose output}

\item{...}{additional arguments are passed to \code{curateVtoDF()}}
}
\description{
Curate data.frame into a data.frame
}
\details{
This function takes a data.frame as input, where one or more
columns are expected to be used in data curation to create
another data.frame. This situation is useful when the final
desired data.frame depends upon values in more than one
column of the input data.frame.

Specifically, this function is a wrapper around \code{curateVtoDF()}.

Typically, \code{curationL2} is derived from YAML formatted files, and
loaded into a list with this type of setup:

\code{curationL2 <- yaml::yaml.load_file("curation.yaml")}.

The structure of curationL2:
\itemize{
\item \code{curationL2} is a list object, whose \code{names(curationL2)} are values
in \code{colnames(x)} and represent column of data used as input.
\item each list element in \code{curationL2} is also a list, whose
\code{names} represent colnames to create or update in the output
\code{data.frame}.
\item these lists contain character vectors \code{length=2} containing
a regular expression substitution pattern (see \code{base::gsub}),
and a replacement pattern.
}

The list is processed in order, and names can be repeated as
necessary to apply the proper substitution patterns in the
order required. New columns created during the curation may also
be used in later curation steps.

Example curation.yaml YAML format. Take note that there is
required leading space in the format.

\preformatted{
From_ColnameA:
  To_ColnameC:
  - - patternA
    - replacementA
  - - patternB
    - replacementB
  To_ColnameD:
  - - patternC
    - replacementC
  - - patternD
    - replacementD
From_ColnameB:
  To_ColnameE:
  - - patternE
    - replacementE
  - - patternF
    - replacementF
}

When the rule creates a colname already present in colnames(x),
then only values specifically matched by the substitution patterns
are modified. For example, this technique can be used to modify
the group assignment of a Sample_ID:

\preformatted{
Sample_ID:
  Group:
  - - Sample1234
    - WildType
}

The rules above will match \code{"Sample1234"} in the \code{"Sample_ID"} column
of x, and assign \code{"WildType"} to the \code{"Group"} column only for
matching entries.

In addition to values in \code{colnames(x)}, the "from" value may
also be \code{"rownames"} which will cause the curation rules to
act upon values in \code{rownames(x)} instead of values in a specific
column of \code{x}.

Note that if a "to" column does not already exist, then all values
in the "from" column which do not match any substitution pattern
will be used to fill the remainder of the "to" column.
Once the "to" column exists, then only entries with a matching
substitution pattern are replaced using the replacement pattern.

For example, for NanoString data, the column \code{"CartridgeWell"} can be
derived from \code{rownames(x)}, after which the new column \code{"CartridgeWell"}
can be used in subsequent curation steps.

Additional notes:
\itemize{
\item The substitution pattern is automatically expanded to include the
whole input string, if not already present. For example supplying \code{"WT"}
will match \code{"^.*(WT).*$"}. However if the substitution pattern is
\code{"^.*(WT).*$"} then it will not be expanded.
\item When the substitution pattern is expanded, the string is also enclosed
in parentheses \code{"()"} which means the replacement can use \code{"\\\\1"} to
use the successfully matched pattern as the output string. For example
if \code{"WT"} and \code{"Mutant"} are always valid genotypes, then it would
be sufficient to define substitution pattern \code{"WT|Mutant"} and
replacement pattern \code{"\\\\1"}.
\item When the substitution pattern is expanded, and the string is enclosed
in parentheses, any parentheses in the substitution pattern are therefore
one level deeper, for example \code{"file([A-Z]+)"} will be expanded to
\code{"^.*(file([A-Z]+)).*$"}. See the example below, where the replacement
pattern uses \code{"\\\\2"} to use only the internal parentheses.
}
}
\examples{
set.seed(123);
df <- data.frame(filename=paste(
   paste0("file",
      sapply(1:5, function(i) {
         paste(sample(LETTERS, 5), collapse="")
      })),
   rep(c("WT", "Mut"), each=3),
   rep(c("Veh","EtOH"), 3),
   sep="_"));
df;

# Note a couple ways of accomplishing similar results:
# Genotype matches "WT|wildtype" and replaces with "WT",
# then matches "Mut|mutant" and replaces with "Mut"
#
# Treatment matches "Veh|EtOH" and simply replaces with
# whatever was matched
curationYaml <- c(
"filename:
  Genotype:
  - - WT|wildtype
    - WT
  - - Mut|mutant
    - Mut
  Treatment:
  - - Veh|EtOH
    - \\\\1
  File:
  - - file([A-Z]+)
    - \\\\1
  FileStem:
  - - file([A-Z]+)
    - \\\\2");
# print the curation.yaml to show its structure
cat(curationYaml)
curationL <- yaml::yaml.load(curationYaml);
curateDFtoDF(df, curationL);

}
\seealso{
Other jam design functions: 
\code{\link{curateVtoDF}()},
\code{\link{groups2contrasts}()}
}
\concept{jam design functions}
